#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | www.openfoam.com
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
#     Copyright (C) 2011-2016 OpenFOAM Foundation
#     Copyright (C) 2019-2020 OpenCFD Ltd.
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     wmake/wmakeLnInclude
#
# Usage
#     wmakeLnInclude [OPTION] [-pwd | <dir>]
#
# Description
#     Link all the source files in the <dir> directory into <dir>/lnInclude
#
#     C files:      .c .h
#     C++ files:    .C .cc .cpp .cxx .H .hh .hpp .hxx
#
#------------------------------------------------------------------------------
Script="${0##*/}"                   # Need 'Script' for wmakeFunctions messages
scriptsDir="${0%/*}"/scripts        # wmake/scripts directory
. "$scriptsDir"/wmakeFunctions      # Source wmake functions

printHelp() {
    cat<<USAGE

Usage: ${0##*/} [OPTION] [-pwd | dir]

options:
  -u | -update      Update
  -s | -silent      Silent mode (do not echo command)
  -pwd              Locate root directory containing a Make/ directory.
  -h | -help        Print the usage

Link all the source files in the <dir> into <dir>/lnInclude

Note
    The '-update' forces an update when the lnInclude directory already exists
    and changes the default linking from 'ln -s' to 'ln -sf'.

USAGE
    exit 0 # clean exit
}


# Report error and exit
die()
{
    exec 1>&2
    echo
    echo "Error encountered:"
    while [ "$#" -ge 1 ]; do echo "    $1"; shift; done
    echo
    echo "See '${0##*/} -help' for usage"
    echo
    exit 1
}


#------------------------------------------------------------------------------
# Parse arguments and options
#------------------------------------------------------------------------------

# Option for 'ln'
optLink="-s"

unset optUpdate optQuiet optPwd

while [ "$#" -gt 0 ]
do
    case "$1" in
        -h | -help*)
            printHelp
            ;;
        -u | -update)
            optUpdate=true
            optLink="-sf"
            ;;
        -s | -silent)
            optQuiet=true
            ;;
        -pwd)
            optPwd=true
            ;;
        -*)
            die "unknown option: '$1'"
            ;;
        *)
            break
            ;;
    esac
    shift
done

[ "$optPwd" = true ] || [ "$#" -eq 1 ] || \
    die "incorrect number of arguments"

#------------------------------------------------------------------------------

unset dir
baseDir="$1"

# With -pwd, go on discovery
if [ "$optPwd" = true ]
then
    if [ -n "$baseDir" ]
    then
        dir="$baseDir"
        if [ -d "$dir" ]
        then
            dir="${dir%/}"
        elif [ -f "$dir" ]
        then
            dir="${dir%/*}"
            : "${dir:=.}"
            [ "$dir" != "$baseDir" ] || dir="."
        else
            echo "$Script error: not a file or directory" 1>&2
            exit 1
        fi

        cd "$dir" 2>/dev/null || {
            echo "$Script error: could not change to directory '$dir'" 1>&2
            exit 1
        }
    fi

    # Locate target with Make/ directory
    if dir="$(findTarget .)"
    then
        baseDir="$(cd "$dir" && pwd -L)"
    else
        exit 2
    fi

    echo "Using $baseDir" 1>&2
fi


# Convert incorrect path/dir/lnInclude to something sensible
while [ "${baseDir##*/}" = lnInclude ]
do
    baseDir="${baseDir%/*}"
    if [ "$baseDir" = lnInclude ]
    then
        baseDir="."
    fi
done
incDir="$baseDir/lnInclude"


[ -d "$baseDir" ] || {
    echo "$Script error: base directory $baseDir does not exist" 1>&2
    exit 2
}

if [ -d "$incDir" ]
then
    [ "$optUpdate" = true ] || exit 0
else
    mkdir "$incDir"
fi

[ -d "$incDir" ] || {
    echo "$Script error: failed to create include directory $incDir" 1>&2
    exit 0
}

cd "$incDir" || exit 1

# Always just display compact info
echo "    ln: $incDir" 1>&2


#------------------------------------------------------------------------------
# Remove any broken links first (this helps when file locations have moved)
#------------------------------------------------------------------------------

case "$WM_ARCH" in
(darwin*)
    # -exec rm (not -delete) to remove names with '/' in their name
    # with \+ instead of \; to pack into a single command
    find -L . -type l -exec rm -- {} \+
    ;;
(*)
    find -L . -type l -delete
    ;;
esac


#------------------------------------------------------------------------------
# Create links, avoid recreating links unless necessary
# things placed in the 'noLink' directory are skipped
#------------------------------------------------------------------------------
find .. \
    \( -name lnInclude -o -name Make -o -name config -o -name noLink \) \
    -prune \
    -o \( \
        -name '*.[CHch]' \
        -o -name '*.cc' \
        -o -name '*.hh' \
        -o -name '*.[ch]xx' \
        -o -name '*.[ch]pp' \
        -o -name '*.type' \
    \)  \
    -exec ln "$optLink" {} . \;

exit 0 # clean exit

#------------------------------------------------------------------------------

/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2020 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::regionModels::areaSurfaceFilmModels::filmTurbulenceModel

Description
    Base class for film turbulence models

SourceFiles
    filmTurbulenceModel.C
    filmTurbulenceModelNew.C

\*---------------------------------------------------------------------------*/

#ifndef filmTurbulenceModel_H
#define filmTurbulenceModel_H

#include "areaFieldsFwd.H"
#include "runTimeSelectionTables.H"
#include "faMatrices.H"
#include "liquidFilmBase.H"
#include "Enum.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace regionModels
{
namespace areaSurfaceFilmModels
{


/*---------------------------------------------------------------------------*\
                       Class filmTurbulenceModel Declaration
\*---------------------------------------------------------------------------*/

class filmTurbulenceModel
{
public:

    // Public Enumerations

        //- Type of friction models
        enum frictionMethodType
        {
            mquadraticProfile,
            mlinearProfile,
            mDarcyWeisbach,
            mManningStrickler
        };


protected:

    //- Reference to liquidFilmBase
    const liquidFilmBase& film_;

    //- Names for friction models
    static const Enum<frictionMethodType> frictionMethodTypeNames_;

     //- Model dictionary
    const dictionary dict_;

    //- Method used
    const frictionMethodType method_;


private:

    // Private Member Functions

        //- No copy construct
        filmTurbulenceModel(const filmTurbulenceModel&) = delete;

        //- No copy assignment
        void operator=(const filmTurbulenceModel&) = delete;


public:

    //- Runtime type information
    TypeName("filmTurbulenceModel");


    // Declare runtime constructor selection table

         declareRunTimeSelectionTable
         (
             autoPtr,
             filmTurbulenceModel,
             dictionary,
             (
                liquidFilmBase& film,
                const dictionary& dict
             ),
             (film, dict)
         );

    // Constructors


        //- Construct from type name, dictionary and surface film model
        filmTurbulenceModel
        (
            const word& modelType,
            liquidFilmBase& film,
            const dictionary& dict
        );


    // Selectors

        //- Return a reference to the selected injection model
        static autoPtr<filmTurbulenceModel> New
        (
            liquidFilmBase& film,
            const dictionary& dict
        );


    //- Destructor
    virtual ~filmTurbulenceModel();


    // Member Functions

        // Access

            //- Return film
            const liquidFilmBase& film() const;


        // Evolution

            //- Return the wall film surface friction
            virtual tmp<areaScalarField> Cw() const;

            //- Return the film turbulence viscosity
            virtual tmp<areaScalarField> mut() const = 0;

            //- Correct/update the model
            virtual void correct() = 0;

            //- Return the source for the film momentum equation
            virtual tmp<faVectorMatrix> Su(areaVectorField& U) const = 0;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace areaSurfaceFilmModels
} // End namespace regionModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
